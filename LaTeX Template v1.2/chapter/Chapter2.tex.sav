\chapter{技术综述}

本文设计和实现的文件自动发送平台使用SpringBoot为主体框架进行开发，
根据功能不同将平台分为多个模块进行开发，每一个模块单独放在一个包中，公共组件类放入公共包中。
底层数据库使用金融系统常见的Oracle数据库。
采用SpringCloud中的Eureka提供对外接口。
前端使用Vue进行开发，UI使用ElementUI框架。
采用Tesseract进行OCR识别PDF文字。

\section{模块化介绍}
模块化设计的历史非常悠久，覆盖范围广泛。
不仅广泛应用于UI设计、软件开发之中，在报纸版面、室内设计、机械制造、土木工程中也无处不在。
软件设计中的模块化设计是指将系统整理根据一定的原则划分为多个小块，称之为模块。
模块之间通过定义良好的接口进行交互，合理有序的组织整个系统。
每个模块独立进行设计开发，可以并行的推进系统的开发进度，更合理的分配人员，提升工作效率。
模块可以提高软件的复用性，职责明确，功能单一的模块可以方便的供给开发人员调用，不需要开发人员对相同的功能进行多个设计，保证了设计的一致性，降低了成本，提升效率。
依照原则划分的模块通常都符合高内聚，低耦合的原则。模块间相对独立，便于升级和维护，移植性高。

\section{SMPT协议}
简单邮件传输协议（Simple Mail Transfer Protocol）是一个在互联网上传输电子邮件的标准。

SMTP是一个相对简单的基于文本的协议。在其之上指定了一条讯息的一个或多个接收者（在大多数情况下被确认是存在的），然后讯息文本会被传输。可以很简单地通过telnet程序来测试一个SMTP服务器。SMTP使用TCP端口25。要为一个给定的域名决定一个SMTP服务器，需要使用DNS的MX记录。

在八十年代早期SMTP开始被广泛地使用。当时，它只是作为UUCP的补充，UUCP更适合于处理在间歇连接的机器间传送邮件。相反，SMTP在发送和接收的机器在持续连线的网络情况下工作得最好。

Sendmail是最早使用SMTP的邮件传输代理之一。到2001年至少有50个程序将SMTP实现为一个客户端（消息的发送者）或一个服务器（消息的接收者）。一些其他的流行的SMTP服务器程序包括了Philip Hazel的exim，IBM的Postfix， D. J. Bernstein的Qmail，以及Microsoft Exchange Server。

由于这个协议开始是基于纯ASCII文本的，它在二进制文件上处理得并不好。例如MIME的标准被开发来编码二进制文件以使其透过SMTP来传输。今天，大多数SMTP服务器都支持8位MIME扩展，它使二进制文件的传输变得几乎和纯文本一样简单。

SMTP是一个“推”的协议，它不允许根据需要从远程服务器上“拉”来消息。要做到这点，邮件客户端必须使用POP3或IMAP。另一个SMTP服务器可以使用ETRN在SMTP上触发一个发送。

\section{Spring技术介绍}
Spring框架是一个基于Java平台，为开发Java应用程序提供全面的基础架构支持。
Spring负责处理基础结构，开发人员负责业务逻辑。
Spring从POJO来构建应用程序，并将业务非侵入性地应用与POJO。

\subsection{依赖注入和控制反转}
Java广泛应用于互联网应用的开发，这些应用包含了大量的对象，对象之间相互合作，相互依赖。
但Java缺乏将松散对象组合为整体的有效方法。
可以通过诸如工厂模式、抽象工程模式、建造者模式、组合模式等设计模式来组织应用的类和实例。
但是，设计模式只是给出了模式的定义，应用场景，和如何设计，实际开发中仍然需要开发人员自己实现他们。

Spring框架的IOC通过另外一种方法将多个对象组织为一个完整应用。

\subsection{SpringBoot技术介绍}
\subsection{Eureka技术介绍}

\section{Oracle技术介绍}

\section{Vue框架介绍}
\subsection{Element技术介绍}

\section{Tesseract技术介绍}


